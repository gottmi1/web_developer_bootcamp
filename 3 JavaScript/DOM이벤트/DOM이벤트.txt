인라인 이벤트

가독성이 나빠져서 그다지 추천되지않는다.
jsx처럼 onClick onChange 이런거

온클릭속성

btn.onclick = function() {
  console.log("ㅁㄴㅇㄻㄴㄹㄴ");
}

const asd = function() {
  console.log("으아악")
}
btn.onmouseenter = asd;
이렇게 해주면 자동으로 속성이 부여가 된다(console.dir로 찍어보면 엘리먼트들은 다 저런 메서드를 내장하고 있음)
온클릭 속성은 마지막으로 받은 속성만 실행함. 그렇기에 여러개의 동작을 할 수 있는 애드 이벤트 리스너를 쓰는 것


애드이벤트 리스너

이벤트 작업을위한 최고의 옵션 웬만하면 이걸 쓰자
세번쨰 인자로 {once : true}를 주면 딱 한번만 실행함
리무브이벤트리스너로 이벤트를 삭제해줄 수도 있다 그래서 좋음


이벤트와 this

이벤트에선 콜백 함수를 쓸 때 하나씩 지정하는 것 보다 this를 써놓는 게 편하다.

for (let btn of buttons) {
  btn.addEventListener('click', colorize)
}
for (let h1 of h1s) {
  h1.addEventListener('click', colorize)
}

function colorize() {
  this.style.background = "red";
  this.style.color = "blue";
}

이런식으로 콜백할 때 자기 자신을 선택할 수 있게 해줌

키보드 이벤트와 이벤트 객체

event.code = keyA 이런식으로 어떤 키인지 알려줌(무조건 대문자로 알려줌)
evnet.key = a, b, c, d 이런식으로 알려줌
이벤트 객체는 모든 이벤트 핸들러에서 엑세스할 수 있다.

폼 이벤트와 preventdefault();

preventdefault는 기본 동작을 막는다
submit의 새로고침, 앵커의 링크 태그의 기본 동작을 막을 수 있음

이벤트 버블링

sec>div>btn 이런식으로 이벤트가 여러 계층에 걸쳐 걸려있을 경우 자식이벤트가 실행될때 모든 부모 이벤트도 실행되는 걸 이벤트 버블링이라고 한다.

e.stopPropagation();를 사용하면 이벤트 버블링을 막을 수 있다


이벤트 위임

ul같은 상위 컨테이너에 이벤트를 걸면, 이벤트가 걸린 건 상위 컨테이너지만 target은 클릭한 자식을 가리키게 된다.

상관 없는 거 : e.target.nodeName === 'LI' && e.target.remove();
이런 식으로 사용할 수도 있는데 boolean에서 왼쪽이 거짓이면 오른쪽 작업은 반복되지 않는다.
이 코드는 클릭 한 타겟의 nodeName 속성이 Li일 떄만 삭제 하라는 것. 저 조건을 뺴면 ul안에 있는게 뭐든지 삭제된다.
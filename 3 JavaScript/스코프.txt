정리 : var는 블록 안에 들어가도 함수 스코프를 가진다.
const,let은 평범하게 블럭스코프를 가짐.

함수 스코프

1. 함수 스코프 내에서 let으로 선언된 변수는 함수 밖에서 접근 불가능.

2. 하지만 let 없이 그냥 변수에 값을 줬다면, 함수가 한 번 이상 실행 됐을 시 접근 가능.

3. 함수 안에서 console찍을 때, 함수 스코프 내에 호출하려는 변수가 없다면 함수 밖에 있는 것도 가져온다.(안에서 밖으로의 접근은 가능. 런타임 시작 전에 전역에서 변수 선언된 것들이 먼저 정의되니까)


블록 스코프

- 블럭 내부에서 let이나 const로 선언된 변수는 블럭 밖으로 나갈 수 없다
if문이나 for문등 함수를 제외한 {}로 쌓인 블록에는 밖에서 접근할 수 없음(안에서 밖은 함수스코프와 마찬가지로 가능함)
블록내부에서 var로 선언된 변수에는 외부에서 접근 가능 호이스팅 때문인 듯.(근데 var는 쓰지 마)


☆스코프체인☆
외부에서 스코프 내부에 있는 값은 접근할 수 없지만,
스코프 내부에서는 외부의 값들에 접근이 가능하다.
스코프 체인은 내부 함수에서 변수를 찾기위해 외부 함수로 접근할 때에 탐색을 하게되는 관계를 말한다.

동작 : 일단 스코프 내부를 탐색하고 선언된 변수가 없다면 한 단계 위의 스코프를 탐색하는 걸 반복한다.
선언을 찾거나, null이 될 때(더 이상 참조가 불가능 할 때) 탐색을 멈춘다.


정적스코프

중첩된 함수 혹은 내부 함수는 상위 함수 혹은 더 높은 상위 함수의 값에 접근할 수가 있다.


함수 표현식(익명함수)

함수를 변수로 저장함 자바스크립트는 기본적으로 함수를 배열이나 객체 다른 값과 같다고 판단하기 때문에 변수로 저장이 가능하다
const asd = function(매개변수) {} 형식


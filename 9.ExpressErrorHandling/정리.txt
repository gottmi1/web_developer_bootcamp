에러핸들링을 미들웨어로 쓰려면
app.use((err,req,res,next) => {})
이와 같이 4개의 매개변수를 받아야한다. 이렇게 정의하면 에러 핸들링 미들웨어가 됨.

async 함수의 에러 핸들링

app.put("/products/:id", async (req, res, next) => {
  try {
    const { id } = req.params;
    const product = await Product.findByIdAndUpdate(id, req.body, {
      runValidators: true,
    });
    // console.log(req.body);
    res.redirect(`/products/${product._id}`);
  } catch (e) {
    next(e);
  }
});

try부분에 원래 실행해야 할 코드를 놓고 catch(e) {next(e)}를 하면 됨
next(e)를 하면

app.use((err, req, res, next) => {
  const { status = 500, message = "에러났음" } = err;
  res.status(status).send(message);
});

얘가 실행된다.

try catch를 매번 타이핑하기는 귀찮다
그러니 아래의 함수를 써야한다

function wrapAsync(fn) {
  // 매개변수 fn은 일반적으로 함수를 매개변수로 받겠다는 의미로 쓰인다.
  return function (req, res, next) {
    fn(req, res, next).catch((e) => next(e));
  };
}
// 상당히 어려운 수준이라고 함. 요점은 함수를 만들어서 async 콜백을 wrap하여 try,catch를 매번 타이핑하지 않을 수도 있다는 것.
// 동작 : 에러가 있으면 catch를 추가하고 next를 호출
// Express에서 모든 async함수는 반드시 try catch next를 해야만 하기때문에 이해하진 못해도 머리속에 집어넣어야 한다고 한다.